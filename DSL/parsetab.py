
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA EQUALS IDENTIFIER LBRACKET LPAREN MATRIX MATRIX_ID MULTIPLY NUMBER PLUS PRINT RBRACKET RPAREN VECTOR VECTOR_IDprogram : program statement\n               | statementstatement : VECTOR_ID EQUALS expressionexpression : LBRACKET vector_values RBRACKETvector_values : NUMBERvector_values : NUMBER COMMA vector_valuesstatement : MATRIX_ID EQUALS expressionexpression : MATRIXexpression : LBRACKET matrix_rows RBRACKETmatrix_rows : rowmatrix_rows : row COMMA matrix_rowsrow : LBRACKET row_values RBRACKETrow_values : NUMBERrow_values : NUMBER COMMA row_valuesexpression : IDENTIFIERexpression : expression PLUS expressionexpression : expression MULTIPLY expressionstatement : PRINT LPAREN IDENTIFIER RPAREN'
    
_lr_action_items = {'VECTOR_ID':([0,1,2,6,10,12,13,14,23,24,25,28,29,],[3,3,-2,-1,-3,-8,-15,-7,-18,-16,-17,-4,-9,]),'MATRIX_ID':([0,1,2,6,10,12,13,14,23,24,25,28,29,],[4,4,-2,-1,-3,-8,-15,-7,-18,-16,-17,-4,-9,]),'PRINT':([0,1,2,6,10,12,13,14,23,24,25,28,29,],[5,5,-2,-1,-3,-8,-15,-7,-18,-16,-17,-4,-9,]),'$end':([1,2,6,10,12,13,14,23,24,25,28,29,],[0,-2,-1,-3,-8,-15,-7,-18,-16,-17,-4,-9,]),'EQUALS':([3,4,],[7,8,]),'LPAREN':([5,],[9,]),'LBRACKET':([7,8,11,16,17,31,],[11,11,18,11,11,18,]),'MATRIX':([7,8,16,17,],[12,12,12,12,]),'IDENTIFIER':([7,8,9,16,17,],[13,13,15,13,13,]),'PLUS':([10,12,13,14,24,25,28,29,],[16,-8,-15,16,16,16,-4,-9,]),'MULTIPLY':([10,12,13,14,24,25,28,29,],[17,-8,-15,17,17,17,-4,-9,]),'NUMBER':([11,18,30,33,],[21,27,21,27,]),'RPAREN':([15,],[23,]),'RBRACKET':([19,20,21,22,26,27,32,34,35,36,],[28,29,-5,-10,32,-13,-12,-6,-11,-14,]),'COMMA':([21,22,27,32,],[30,31,33,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,6,]),'expression':([7,8,16,17,],[10,14,24,25,]),'vector_values':([11,30,],[19,34,]),'matrix_rows':([11,31,],[20,35,]),'row':([11,31,],[22,22,]),'row_values':([18,33,],[26,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','DSL.py',71),
  ('program -> statement','program',1,'p_program','DSL.py',72),
  ('statement -> VECTOR_ID EQUALS expression','statement',3,'p_statement_vector_assignment','DSL.py',76),
  ('expression -> LBRACKET vector_values RBRACKET','expression',3,'p_vectordef','DSL.py',82),
  ('vector_values -> NUMBER','vector_values',1,'p_vector_values_single','DSL.py',86),
  ('vector_values -> NUMBER COMMA vector_values','vector_values',3,'p_vector_values_multiple','DSL.py',90),
  ('statement -> MATRIX_ID EQUALS expression','statement',3,'p_statement_matrix_assignment','DSL.py',94),
  ('expression -> MATRIX','expression',1,'p_expression_matrix','DSL.py',100),
  ('expression -> LBRACKET matrix_rows RBRACKET','expression',3,'p_matrix','DSL.py',104),
  ('matrix_rows -> row','matrix_rows',1,'p_matrix_rows_single','DSL.py',108),
  ('matrix_rows -> row COMMA matrix_rows','matrix_rows',3,'p_matrix_rows_multiple','DSL.py',112),
  ('row -> LBRACKET row_values RBRACKET','row',3,'p_row','DSL.py',116),
  ('row_values -> NUMBER','row_values',1,'p_row_values','DSL.py',120),
  ('row_values -> NUMBER COMMA row_values','row_values',3,'p_row_values_multiple','DSL.py',124),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','DSL.py',130),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','DSL.py',137),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_multiply','DSL.py',141),
  ('statement -> PRINT LPAREN IDENTIFIER RPAREN','statement',4,'p_statement_print','DSL.py',145),
]
